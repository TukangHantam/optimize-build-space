name: "Optimize Build Disk Space"
description: "Removes unused SDKs, tools, and cached files to free up space for your GitHub Actions builds."

inputs:
  remove-dotnet:
    description: "Removes .NET runtime and libraries. (frees ~2 GB)"
    required: false
    default: false
  remove-haskell:
    description: "Removes GHC (Haskell) artifacts. (frees ~5.2 GB)"
    required: false
    default: false
  remove-codeql:
    description: "Removes CodeQL Action Bundles. (frees ~5.4 GB)"
    required: false
    default: false
  remove-android:
    description: "Removes Android SDKs and Tools. (frees ~9 GB)"
    required: false
    default: false
  remove-cached-tools:
    description: "Removes cached tools used by setup actions by GitHub. (frees ~8.3 GB)"
    required: false
    default: false
  remove-docker-images:
    description: "Removes cached Docker images. (frees ~3.2 GB)"
    required: false
    default: false
  remove-large-packages:
    description: "Removes unwanted large apt packages. (frees ~3.1 GB)"
    required: false
    default: false
  verbose:
    description: "Enables detailed logging during cleanup."
    required: false
    default: false
  show-disk-space:
    description: "Shows disk space before and after cleanup."
    required: false
    default: false

branding:
  icon: "hard-drive"
  color: "blue"

runs:
  using: "composite"
  steps:
    - name: Disk space (before cleanup)
      if: ${{ inputs.show-disk-space == 'true' }}
      shell: bash
      run: |
        echo "=== Memory and Swap ==="
        free -h
        echo
        swapon --show
        echo
        echo "=== Available Storage ==="
        df -h
        echo

    - name: Optimize disk space
      shell: bash
      run: |
        set -euo pipefail

        removing=""
        [[ ${{ inputs.remove-dotnet }} == 'true' ]] && removing+="dotnet "
        [[ ${{ inputs.remove-android }} == 'true' ]] && removing+="android "
        [[ ${{ inputs.remove-haskell }} == 'true' ]] && removing+="haskell "
        [[ ${{ inputs.remove-codeql }} == 'true' ]] && removing+="codeql "
        [[ ${{ inputs.remove-cached-tools }} == 'true' ]] && removing+="cached_tools "
        [[ ${{ inputs.remove-docker-images }} == 'true' ]] && removing+="docker "
        [[ ${{ inputs.remove-large-packages }} == 'true' ]] && removing+="large_packages "
        echo "ðŸ§¹ Removing: $removing"
        echo

        verbose=""
        if [[ ${{ inputs.verbose }} == 'true' ]]; then
          verbose=-v
        fi

        echo "Removing unwanted software..."
        pids=()
        (
          [[ ${{ inputs.remove-dotnet }} == 'true' ]] && sudo rm -rf ${verbose} /usr/share/dotnet &
          pids+=($!)
          [[ ${{ inputs.remove-haskell }} == 'true' ]] && sudo rm -rf ${verbose} /opt/ghc /usr/local/.ghcup &
          pids+=($!)
          [[ ${{ inputs.remove-codeql }} == 'true' ]] && sudo rm -rf ${verbose} /opt/hostedtoolcache/CodeQL &
          pids+=($!)
          [[ ${{ inputs.remove-android }} == 'true' ]] && sudo rm -rf ${verbose} /usr/local/lib/android &
          pids+=($!)
          [[ ${{ inputs.remove-cached-tools }} == 'true' ]] && sudo rm -rf ${verbose} "$AGENT_TOOLSDIRECTORY" &
          pids+=($!)
        )
        for pid in "${pids[@]}"; do
          wait $pid || true
        done

        if [[ ${{ inputs.remove-docker-images }} == 'true' ]]; then
          echo "Removing cached Docker images..."
          sudo docker image prune --all --force || true
        fi

        if [[ ${{ inputs.remove-large-packages }} == 'true' ]]; then
          echo "Removing large apt packages..."
          sudo apt-get remove -y '^aspnetcore-.*' '^dotnet-.*' '^llvm-.*' 'php.*' '^mongodb-.*' '^mysql-.*' > /dev/null
          if [[ "$(uname -m)" == "x86_64" ]]; then
            sudo apt-get remove -y google-chrome-stable microsoft-edge-stable google-cloud-cli powershell --fix-missing > /dev/null
          fi
          sudo apt-get remove -y azure-cli firefox mono-devel libgl1-mesa-dri --fix-missing > /dev/null

          sudo apt-get autoremove -y > /dev/null &
          pid_autoremove=$!
          sudo apt-get clean > /dev/null &
          pid_clean=$!
          sudo rm -rf ${verbose} /tmp/* > /dev/null &
          pid_tmp=$!
          rm -rf ${verbose} ~/.cache > /dev/null &
          pid_cache=$!

          wait $pid_autoremove || true
          wait $pid_clean || true
          wait $pid_tmp || true
          wait $pid_cache || true
        fi

        echo "Performing final cleanup..."
        sudo rm -rf ${verbose} /usr/local/share/{powershell,chromium,edge_driver,chromedriver} || true

        echo "Creating 4GB swap file..."
        sudo swapoff -a || true
        sudo rm -f ${verbose} /mnt/swapfile || true
        sudo fallocate -l 4G /swapfile
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile

        echo
        echo "âœ… Cleanup complete â€” disk space optimized and 4GB swapfile created."
        echo

    - name: Disk space (after cleanup)
      if: ${{ inputs.show-disk-space == 'true' }}
      shell: bash
      run: |
        echo "=== Memory and Swap ==="
        free -h
        echo
        swapon --show
        echo
        echo "=== Available Storage ==="
        df -h
